/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.energyresourcesspring.service;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class DeviceEventAvroService extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8204832559911135270L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DeviceEventAvroService\",\"namespace\":\"com.example.manningenergyresourcesspring.service\",\"fields\":[{\"name\":\"charging\",\"type\":\"int\"},{\"name\":\"regionId\",\"type\":\"int\"},{\"name\":\"deviceId\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DeviceEventAvroService> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DeviceEventAvroService> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<DeviceEventAvroService> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<DeviceEventAvroService> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<DeviceEventAvroService> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this DeviceEventAvroService to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a DeviceEventAvroService from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a DeviceEventAvroService instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static DeviceEventAvroService fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private int charging;
  private int regionId;
  private int deviceId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DeviceEventAvroService() {}

  /**
   * All-args constructor.
   * @param charging The new value for charging
   * @param regionId The new value for regionId
   * @param deviceId The new value for deviceId
   */
  public DeviceEventAvroService(java.lang.Integer charging, java.lang.Integer regionId, java.lang.Integer deviceId) {
    this.charging = charging;
    this.regionId = regionId;
    this.deviceId = deviceId;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return charging;
    case 1: return regionId;
    case 2: return deviceId;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: charging = (java.lang.Integer)value$; break;
    case 1: regionId = (java.lang.Integer)value$; break;
    case 2: deviceId = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'charging' field.
   * @return The value of the 'charging' field.
   */
  public int getCharging() {
    return charging;
  }


  /**
   * Sets the value of the 'charging' field.
   * @param value the value to set.
   */
  public void setCharging(int value) {
    this.charging = value;
  }

  /**
   * Gets the value of the 'regionId' field.
   * @return The value of the 'regionId' field.
   */
  public int getRegionId() {
    return regionId;
  }


  /**
   * Sets the value of the 'regionId' field.
   * @param value the value to set.
   */
  public void setRegionId(int value) {
    this.regionId = value;
  }

  /**
   * Gets the value of the 'deviceId' field.
   * @return The value of the 'deviceId' field.
   */
  public int getDeviceId() {
    return deviceId;
  }


  /**
   * Sets the value of the 'deviceId' field.
   * @param value the value to set.
   */
  public void setDeviceId(int value) {
    this.deviceId = value;
  }

  /**
   * Creates a new DeviceEventAvroService RecordBuilder.
   * @return A new DeviceEventAvroService RecordBuilder
   */
  public static DeviceEventAvroService.Builder newBuilder() {
    return new DeviceEventAvroService.Builder();
  }

  /**
   * Creates a new DeviceEventAvroService RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DeviceEventAvroService RecordBuilder
   */
  public static DeviceEventAvroService.Builder newBuilder(DeviceEventAvroService.Builder other) {
    if (other == null) {
      return new DeviceEventAvroService.Builder();
    } else {
      return new DeviceEventAvroService.Builder(other);
    }
  }

  /**
   * Creates a new DeviceEventAvroService RecordBuilder by copying an existing DeviceEventAvroService instance.
   * @param other The existing instance to copy.
   * @return A new DeviceEventAvroService RecordBuilder
   */
  public static DeviceEventAvroService.Builder newBuilder(DeviceEventAvroService other) {
    if (other == null) {
      return new DeviceEventAvroService.Builder();
    } else {
      return new DeviceEventAvroService.Builder(other);
    }
  }

  /**
   * RecordBuilder for DeviceEventAvroService instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DeviceEventAvroService>
    implements org.apache.avro.data.RecordBuilder<DeviceEventAvroService> {

    private int charging;
    private int regionId;
    private int deviceId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(DeviceEventAvroService.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.charging)) {
        this.charging = data().deepCopy(fields()[0].schema(), other.charging);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.regionId)) {
        this.regionId = data().deepCopy(fields()[1].schema(), other.regionId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.deviceId)) {
        this.deviceId = data().deepCopy(fields()[2].schema(), other.deviceId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing DeviceEventAvroService instance
     * @param other The existing instance to copy.
     */
    private Builder(DeviceEventAvroService other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.charging)) {
        this.charging = data().deepCopy(fields()[0].schema(), other.charging);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.regionId)) {
        this.regionId = data().deepCopy(fields()[1].schema(), other.regionId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.deviceId)) {
        this.deviceId = data().deepCopy(fields()[2].schema(), other.deviceId);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'charging' field.
      * @return The value.
      */
    public int getCharging() {
      return charging;
    }


    /**
      * Sets the value of the 'charging' field.
      * @param value The value of 'charging'.
      * @return This builder.
      */
    public DeviceEventAvroService.Builder setCharging(int value) {
      validate(fields()[0], value);
      this.charging = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'charging' field has been set.
      * @return True if the 'charging' field has been set, false otherwise.
      */
    public boolean hasCharging() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'charging' field.
      * @return This builder.
      */
    public DeviceEventAvroService.Builder clearCharging() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'regionId' field.
      * @return The value.
      */
    public int getRegionId() {
      return regionId;
    }


    /**
      * Sets the value of the 'regionId' field.
      * @param value The value of 'regionId'.
      * @return This builder.
      */
    public DeviceEventAvroService.Builder setRegionId(int value) {
      validate(fields()[1], value);
      this.regionId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'regionId' field has been set.
      * @return True if the 'regionId' field has been set, false otherwise.
      */
    public boolean hasRegionId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'regionId' field.
      * @return This builder.
      */
    public DeviceEventAvroService.Builder clearRegionId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'deviceId' field.
      * @return The value.
      */
    public int getDeviceId() {
      return deviceId;
    }


    /**
      * Sets the value of the 'deviceId' field.
      * @param value The value of 'deviceId'.
      * @return This builder.
      */
    public DeviceEventAvroService.Builder setDeviceId(int value) {
      validate(fields()[2], value);
      this.deviceId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'deviceId' field has been set.
      * @return True if the 'deviceId' field has been set, false otherwise.
      */
    public boolean hasDeviceId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'deviceId' field.
      * @return This builder.
      */
    public DeviceEventAvroService.Builder clearDeviceId() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DeviceEventAvroService build() {
      try {
        DeviceEventAvroService record = new DeviceEventAvroService();
        record.charging = fieldSetFlags()[0] ? this.charging : (java.lang.Integer) defaultValue(fields()[0]);
        record.regionId = fieldSetFlags()[1] ? this.regionId : (java.lang.Integer) defaultValue(fields()[1]);
        record.deviceId = fieldSetFlags()[2] ? this.deviceId : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DeviceEventAvroService>
    WRITER$ = (org.apache.avro.io.DatumWriter<DeviceEventAvroService>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DeviceEventAvroService>
    READER$ = (org.apache.avro.io.DatumReader<DeviceEventAvroService>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.charging);

    out.writeInt(this.regionId);

    out.writeInt(this.deviceId);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.charging = in.readInt();

      this.regionId = in.readInt();

      this.deviceId = in.readInt();

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.charging = in.readInt();
          break;

        case 1:
          this.regionId = in.readInt();
          break;

        case 2:
          this.deviceId = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










